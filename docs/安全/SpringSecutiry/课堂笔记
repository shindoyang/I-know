### 技术选型

一般来说，常见的安全管理技术栈的<code>组合</code>是这样的：

* SSM + Shiro

* Spring Boot / Spring Cloud + Spring Secutiry

以上只是推荐组合

---

### 入门案例

![03-入门案例](简介.assets/03-入门案例.png)

> 参考：https://www.cnblogs.com/beixuan/p/13401771.html

---

### 过滤器链的加载原理

![02-SpringSecurity基本原理](简介.assets/02-SpringSecurity基本原理.png)

SpringBoot 对 Security 的自动配置

> https://docs.spring.io/spring-security/site/docs/5.3.4.RELEASE/reference/html5/#servlet-hello

---

### SpringSecurity web 权限方案

#### 用户认证

##### 设置用户名密码

![04-web权限方案-认证-设置用户名和密码](笔记截图.assets/04-web权限方案-认证-设置用户名和密码.png)



##### 查询数据库完成认证

![05-web权限方案-认证-查询数据库认证](课堂笔记.assets/05-web权限方案-认证-查询数据库认证.png)

注意：SpringBoot 2.2 之后，默认使用Mysql8，需要在driverClass配置上加cj，而且url需要设置时区



##### 自定义用户登录页面

安全设置参考如下：

```java
@Override
protected void configure(HttpSecurity http)throws Exception{
    http.formLogin()//自定义自己编写的登录页面
        .loginPage("/login.html")//设置登录页面
        .loginProcessingUrl("/user/login")//登录访问路径
        .defaultSuccessUrl("/test/index").permitAll() //这里加上permitAll() 是为了让这个跳转逻辑不需要认证
        .and()
        .authorizeRequest() //可以定义哪些方法被保护，哪些方法不被保护
        	.antMatchers("user/login","/test/hello").permitAll() //设置哪些路径可以直接访问，不需要认证
        anyRequest().authenticated()//表示所有请求都需要认证
        and().csrf().disable();//关闭csrf的防护
}
```

![06-web权限方案-认证-自定义登录页面](课堂笔记.assets/06-web权限方案-认证-自定义登录页面.png)

#### 用户授权

##### 基于权限访问控制

![07-web权限方案-基于角色或权限的访问控制](课堂笔记.assets/07-web权限方案-基于角色或权限的访问控制.png)

要注意hasRole、hasAnyRole这两个方法，底层源码判断的时候，会在前面加上ROLE_，所以给用户授权的时候，要记得加上这个前缀。

##### 自定义403页面

![08-web权限方案-配置403访问页面](课堂笔记.assets/08-web权限方案-配置403访问页面.png)

##### 注解使用

![09-web权限方案-注解使用](课堂笔记.assets/09-web权限方案-注解使用.png)

---

#### 用户注销

![10-web权限方案-用户注销](课堂笔记.assets/10-web权限方案-用户注销.png)

> logout接口实际调用的是security框架底层的：SecurityContextLogoutHandler.java的logout方法

除了调用底层接口，还可以显示调用：

```java
new SecurityContextLogoutHandler().logout(request, null, null);
```

#### 自动登录（记住我）

![11-web权限方案-记住用户流程](课堂笔记.assets/11-web权限方案-记住用户流程.png)





![12-web权限方案-记住用户实现](课堂笔记.assets/12-web权限方案-记住用户实现.png)

#### CSRF

![image-20210125160410895](课堂笔记.assets/image-20210125160410895.png)

![image-20210125160416914](课堂笔记.assets/image-20210125160416914.png)

![image-20210125160444219](课堂笔记.assets/image-20210125160444219.png)

---

### SpringSecurity 微服务权限方案

##### 认证授权过程分析

![13-微服务权限方案-实现过程分析](课堂笔记.assets/13-微服务权限方案-实现过程分析.png)

##### 数据模型介绍

![14-微服务权限方案-数据模型](课堂笔记.assets/14-微服务权限方案-数据模型.png)

##### 案例技术介绍

![15-微服务权限方案-案例技术介绍](课堂笔记.assets/15-微服务权限方案-案例技术介绍-1611625134276.png)

##### 搭建项目工程

![16-微服务权限方案-搭建项目工程](课堂笔记.assets/16-微服务权限方案-搭建项目工程.png)

##### 编写权限工具类

![17-微服务权限方案-编写代码（权限工具类）](课堂笔记.assets/17-微服务权限方案-编写代码（权限工具类）.png)

##### 启动redis和nacos

![18-微服务权限方案-启动redis和nacos](课堂笔记.assets/18-微服务权限方案-启动redis和nacos.png)

##### 编写认证和授权过滤器

![19-微服务权限方案-编写代码（认证和授权过滤器）](课堂笔记.assets/19-微服务权限方案-编写代码（认证和授权过滤器）.png)

##### 编写核心配置类

![20-微服务权限方案-编写代码（核心配置类）](课堂笔记.assets/20-微服务权限方案-编写代码（核心配置类）.png)

##### 实现UserDetailsService

![21-微服务权限方案-编写代码（UserDetailsService）](课堂笔记.assets/21-微服务权限方案-编写代码（UserDetailsService）.png)

##### 权限管理模块前后端

![22-微服务权限方案-权限模块（代码说明）](课堂笔记.assets/22-微服务权限方案-权限模块（代码说明）-1611718933416.png)

##### 认证流程

![23-认证流程](课堂笔记.assets/23-认证流程-1611719073437.jpg)

