#### 1、redis分布式锁引发的死锁

在分布式锁的方案中，可以使用redis的原子命令 SETNX + EXPIRE命令来实现。但有个弊端，在特殊情况下会出现死锁：

当代码执行到第一步setnx，往redis里面设置了值，如果此时当前节点的redis服务宕机了，那么就没有机会执行expire命令，也没有机会执行finally的锁释放命令。最后导致后面的线程一直setnx失败，导致死锁

##### 1.1 解决方法

1. 使用redission 的RLock对象的tryLock方法设置key，让底层保证key的设置+失效两个步骤的原子性
2. 使用lua脚本提供”分布式锁服务“，保证处理命令的原子性

```java
public redisDeadLockDemo(String killId , String userId){
    ValueOperations ops = stringRedisTemplate.opsForValue();
    final String key = new StringBuffer().append(killId).append(userId).append("-redisLock").toString();
    final String value = RandomUtil.generateOrderCode();
    //第一步：基于redis的setNX命令尝试设置值
    Boolean cacheRes = ops.setIfAbsent(key,value);
    //如redis中key没有被设置过，设置成功
    try{
        if(cacheRes){
            //第二步：设置key的主动失效时间
        	stringRedisTempalte.expire(key,60,TimeUnit.class);
            //业务逻辑
            ......
    	}
    }finally{
        //第三步：保险起见，每次都要删除key
        stringRedisTemplate.delete(key);
    }
        
}
```

