手动释放内存的问题：
1、忘记回收
2、多次回收

# GC 的基础
> jvm的调优主要集中在垃圾回收器的选择和参数设置上

## 1.什么是垃圾
没有任何引用指向的一个对象或者多个对象（循环引用）

## 2.怎么定位垃圾：
1. 引用计数（解决不了循环应用，引用数都不为零，引起内存泄漏）
2. 根可达算法（jvm采用的算法）
    根对象有哪些：
说法一：线程栈里面的局部变量、引进Class里面的静态变量、常量池、JNI指针引用到的变量
说法二：JAVA 虚拟机规范里面说的
JVM stack ：栈对象里面的 
native method stack：本地方法栈里面的
run-time constant pool：用到类里面的常量池指向的
static references in method area：静态变量指向的对象
Clazz：class落到内存，指向的对象

 ![image-20210407170949520](images/image-20210407170949520.png)

 ## 常见的垃圾回收算法
 1.  Mark-Sweep（标记清除）   --位置不连续，产生碎片 
 2.  Copying（拷贝）--没有碎片，效率高，浪费空间
 3.  Mark-Compact（标记压缩）--没有碎片，效率偏低（内存整理时，多线程要进行线程同步）

 ![image-20210407171005667](images/image-20210407171005667.png)

 ![image-20210407171019952](images/image-20210407171019952.png)

 ![image-20210407171035787](images/image-20210407171035787.png)



 ## JVM内存分代模型（用于分代垃圾回收算法）
 1.部分垃圾回收器使用的分代模型：（新型垃圾回收器已经不用了）
 2.分代模型：
 * 新生代：new-yong
   - 存活对象少
   - 使用copy算法，效率高
 *  老年代：old
    - 垃圾少
    - 一般使用mark compact
    - g1使用copy
 *  永久代（1.7）/元数据区（1.8）Metaspace  
    1. 永久代/元数据 - Class
    2. 永久代必须指定大小限制（局限性），元数据区可以设置，也不可以不设置，无上限（受限于物理内存）
    3. 字符串常量 1.7-永久代，1.8-堆
    4. Method area 是逻辑概念，1.7对应就是永久代，1.8对应的就是元数据区
    5. 元数据区不受jvm管理了，归操作系统管

3. 新生代 = Eden + 2个suvivor区，垃圾回收一般叫：yong GC、 YGC、Minor GC，
   1. YGC回收之后，大多数的对象会被回收，活着的进入s0
   2. 再次YGC，活着的对象 eden + s0 -> s1
   3. 再次YGC，eden + s1 -> s0
   4. 年龄足够 -> 老年代 （老的回收器：15，CMS：6次 ）
   5. s区装不下 -> 老年代
4. 老年代
   1. 顽固分子
   2. 老年代满了FGC  Full GC  ->Mark-compact
5. GC Tuning(Ceneration)
   1. 尽量减少FGC  看线上服务器配置，FGC容易产生STW（stop the world），停顿现象，内存越大，停顿越久
   2. MinorGC = YGC
   3. MajorGC = FGC
   
    ![image-20210407171054798](images/image-20210407171054798.png)
   
## 常见的垃圾回收器  10种

  ![image-20210407171110430](images/image-20210407171110430.png)

   最早用的组合：Serial + Serial old
   1. Serial：年轻代，串行回收
      ![image-20210407171126259](images/image-20210407171126259.png)
   2. Parallel Scavenge：年轻代，并行回收
      ![image-20210407171140799](images/image-20210407171140799.png)
   3. ParNew：年轻代，配合CMS并行回收
      ![image-20210407171155580](images/image-20210407171155580.png)
   4. SerialOld
   5. ParallelOld
   6. ConcurrentMarkSweep：老年代，特别复杂，并发的垃圾回收和应用程序同时运行，降低STW的时间（200ms内）
      ![image-20210407171515957](images/image-20210407171515957.png)
   7. G1 (10ms内)
   8. ZGC (1ms内) PK  c++
   9. Shenandoah , 和ZGC属于竞争关系
   10. Eplison，调试jvm时候使用 

 调优对象：第5点之前（含第5点），范围更细一点是第1/2点和第4/5点
  1.8默认的垃圾回收器是 PS + ParallelOld ，就是PareallelGC

## JVM调优第一步，了解生产环境下的垃圾回收组合
* JVM 的命令行参数参考：
* JVM 参数分类：
  * 标准参数：-开头，所有的HotSpot都支持
  * 非标准参数：-X开头，特定版本HotSpot支持特定命令
  * 不稳定参数： -XX开头，下个版本可能取消
  
   ![image-20210407171526951](images/image-20210407171526951.png)
  
  想使用G1 GC，可以这样写：
  Java -XX:+UseG1GC
  
   特别要记住的参数：-XX:+PrintCommandLineFlags  命令行参数
  ![image-20210407171539988](images/image-20210407171539988.png)



   

   

 





 

 